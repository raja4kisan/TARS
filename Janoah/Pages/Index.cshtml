@page
@model IndexModel

<h2 class="chat-title">TARS</h2>
<link rel="stylesheet" href="~/css/site.css" />
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&display=swap" rel="stylesheet">

<div class="chat-container">
    <div id="chatbox" class="messages-container">
        @foreach (var message in Model.ChatHistory)
        {
            <div class="chat-message @(message.IsUser ? "user-message" : "bot-message")">
                <div class="message-content">@message.Content</div>
                <div class="message-time">@DateTime.Now.ToString("h:mm tt")</div>
            </div>
        }
    </div>

    <div class="chat-input-container">
        <input type="text" id="userInput" placeholder="Type your message..." />
        <button id="sendBtn">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="22" y1="2" x2="11" y2="13"></line>
                <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
            </svg>
        </button>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("sendBtn").addEventListener("click", sendMessage);
        document.getElementById("userInput").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
        });

        // Auto-scroll to bottom on page load
        const chatbox = document.getElementById("chatbox");
        chatbox.scrollTop = chatbox.scrollHeight;
    });

    async function sendMessage() {
        var userInput = document.getElementById("userInput").value.trim();
        if (!userInput){
            return;
        }
        var chatbox = document.getElementById("chatbox");
        const currentTime = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});

        // Append user message
        chatbox.innerHTML += `
            <div class='chat-message user-message fade-in'>
                <div class="message-content">${userInput}</div>
                <div class="message-time">${currentTime}</div>
            </div>`;
        document.getElementById("userInput").value = "";
        chatbox.scrollTop = chatbox.scrollHeight;

        // Append "Typing..." indicator
        let typingIndicator = document.createElement("div");
        typingIndicator.className = "chat-message bot-message fade-in typing-indicator";
        typingIndicator.innerHTML = `
            <div class="message-content">
                <div class="typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>`;
        chatbox.appendChild(typingIndicator);
        chatbox.scrollTop = chatbox.scrollHeight;

        try {
            let response = await fetch("/Tally/GetChatbotResponse", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ Text: userInput })
            });

            if (!response.ok) throw new Error("Failed to fetch response.");
            let data = await response.json();
            let botResponse = data.response || "I'm not sure how to respond to that.";

            setTimeout(() => {
                // Remove Typing Indicator
                chatbox.removeChild(typingIndicator);

                // Append Bot Response
                chatbox.innerHTML += `
                    <div class='chat-message bot-message fade-in'>
                        <div class="message-content">${botResponse}</div>
                        <div class="message-time">${currentTime}</div>
                    </div>`;
                chatbox.scrollTop = chatbox.scrollHeight;
            }, 1000); // Simulating a delay for better UX
        } catch (error) {
            console.error("Error fetching response:", error);
            chatbox.removeChild(typingIndicator);
            chatbox.innerHTML += `
                <div class='chat-message bot-message fade-in'>
                    <div class="message-content">Error processing your request. Please try again.</div>
                    <div class="message-time">${currentTime}</div>
                </div>`;
        }
    }
</script>

<style>
    body {
        /* background-image: url('/backimage1.jpeg'); */
        /* background-image: url('125887871_graident ai robot.jpg'); */
        background-image: url('bot.jpg');
        background-size: cover;
        background-position: center; /* Changed from 'right' to 'center' */
        background-attachment: fixed;
        font-family: 'Montserrat', sans-serif;
        margin: 0;
        padding: 20px;
        height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center; /* Changed from 'center' to 'center' */
        justify-content: center; /* Changed from 'right' to 'center' */
    }

    .chat-title {
        text-align: center;
        font-size: 32px;
        font-weight: 600;
        letter-spacing: 2px;
        margin-bottom: 20px;
        color: #fff;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        background: linear-gradient(135deg, #000000, #000);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        position: relative; /* Added for better positioning */
        z-index: 10; /* Added to ensure the title stays above other elements */
    }

    .chat-container {
        width: 90%;
        max-width: 1000px; /* Increased width */
        height: 68vh; /* One fourth of the screen height */
        margin: 20px auto;
        border-radius: 15px;
        padding: 15px;
        opacity: 1;
        overflow-y: auto;
        backdrop-filter: blur(10px);
        background: rgba(255, 255, 255, 0.1); /* White transparent */
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.2);
        display: flex;
        flex-direction: column;
    }

    .messages-container {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
    }

        .messages-container::-webkit-scrollbar {
            width: 6px;
        }

        .messages-container::-webkit-scrollbar-thumb {
            background-color: rgba(255, 255, 255, 0.3);
            border-radius: 3px;
        }

    .chat-message {
        padding: 12px 18px;
        margin: 10px 0;
        border-radius: 18px;
        max-width: 75%;
        position: relative;
        animation: fadeIn 0.3s ease-out;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .user-message {
        background: linear-gradient(135deg, #357EC7, #1F45FC);
        color: white;
        margin-left: auto;
        border-bottom-right-radius: 4px;
    }

    .bot-message {
        background: linear-gradient(135deg, #41A317, #60883C);
        color: white;
        margin-right: auto;
        border-bottom-left-radius: 4px;
    }

    .message-content {
        font-size: 16px;
        line-height: 1.5;
        word-wrap: break-word;
    }

    .message-time {
        font-size: 11px;
        opacity: 0.7;
        margin-top: 5px;
        text-align: right;
    }

    .chat-input-container {
        display: flex;
        padding: 15px;
        background: rgba(255, 255, 255, 0.1);
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

        .chat-input-container input {
            flex: 1;
            padding: 15px 20px;
            border: none;
            border-radius: 30px;
            background: rgba(255, 255, 255, 0.9);
            color: #333;
            font-size: 16px;
            outline: none;
            transition: all 0.3s;
        }

            .chat-input-container input:focus {
                box-shadow: 0 0 0 2px rgba(62, 130, 247, 0.6);
            }

            .chat-input-container input::placeholder {
                color: #999;
            }

        .chat-input-container button {
            width: 50px;
            height: 50px;
            margin-left: 10px;
            background: linear-gradient(135deg, #3a7bd5, #00d2ff);
            color: white;
            border: none;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 3px 10px rgba(0, 123, 255, 0.4);
        }

            .chat-input-container button:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0, 123, 255, 0.5);
            }

            .chat-input-container button:active {
                transform: translateY(0);
            }

    .fade-in {
        animation: fadeIn 0.4s ease-in-out;
    }

    /* Fix for keyframes in Razor view */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .typing-indicator {
        padding: 12px 18px;
    }

    .typing-dots {
        display: flex;
        align-items: center;
        height: 20px;
    }

        .typing-dots span {
            height: 8px;
            width: 8px;
            margin-right: 5px;
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 50%;
            display: inline-block;
            animation: bouncingDots 1.4s infinite ease-in-out both;
        }

            .typing-dots span:nth-child(1) {
                animation-delay: -0.32s;
            }

            .typing-dots span:nth-child(2) {
                animation-delay: -0.16s;
            }

    /* Fix for keyframes in Razor view */
    @@keyframes bouncingDots {
        0%, 80%, 100% {
            transform: scale(0);
        }

        40% {
            transform: scale(1);
        }
    }

    @@media (max-width: 768px) {
        .chat-container {
            width: 95%;
            height: 75vh;
        }

        .chat-message {
            max-width: 85%;
        }
    }
</style>